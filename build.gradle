import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*

apply plugin: "base"
apply plugin:  "groovy"
apply plugin:  "java"
apply plugin: 'application'
apply plugin:  "maven"

group = "edu.holycross.shot"
version = '0.0.9'

mainClassName = "Parser"

apply from: "versions.gradle"

if (hasProperty('pub')) {
    System.err.print "Using configuration data from ${pub}"
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'pub.gradle'"
        apply from: "pub.gradle"
    }
}



if (hasProperty('conf')) {
    System.err.print "Using configuration data from ${conf}"
    File confFile = new File(conf)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${conf} found.")
    } else {
        apply from: conf
    }

} else {
    File confFile = new File("conf.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        println "Using default configuration in 'conf.gradle'"
        apply from: "conf.gradle"
    }
}




buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}

repositories {
    mavenCentral()
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases"
    }
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/repositories/papyriinfo/"
    }
}

dependencies {
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  compile group: 'org.xerial',name: 'sqlite-jdbc', version: sqlLiteVersion



  compile group : 'edu.unc.epidoc', name: 'transcoder', version : epidocVersion
  compile group: 'net.sf.opencsv', name: 'opencsv', version : opencsvVersion

  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'

  testCompile group :'xmlunit', name: 'xmlunit', version: xmlunitVersion

  // to document:
  compile group: 'edu.harvard.chs', name : 'cite' , version: citeVersion

}


task inflClass(type: Copy) {
  from ("data/inflection") {
    include "*.csv"
  }
  into "${buildDir}"
}

task morphStems() {
  description = "Creates composite csv file for morphological stems collection."
}
morphStems.doLast {
  if (! buildDir.exists()) {
    buildDir.mkdir()
  }
  File stems = new File(buildDir, "morphstems.csv")  
  stems.setText("StemUrn,LexicalEntity,Lemma,Stem,StemClass,Application\n")

  def srcDirs = ["data/nounstemsrc", "data/verbstemsrc"]

  srcDirs.each {
    File dir = new File(it)
    dir.eachFileMatch(~/.*.csv/) { csvFile ->  
      Integer count = 0
      csvFile.eachLine { ln ->
	if (count > 0) {
	  stems.append("${ln}\n", "UTF-8")
	}
	count++;
      }
    }
  }
}


task endings() {
  description = "Creates composite csv file for endings collection."
}

endings.doLast {
  if (! buildDir.exists()) {
    buildDir.mkdir()
  }
  File endingsFile = new File(buildDir, "endings.csv")
  endingsFile.setText("EndingUrn,EndingString,Form,FormSet\n")

  def srcDirs = ["data/nounendsrc", "data/verbendsrc"]
  srcDirs.each {
    File dir = new File(it)
    dir.eachFileMatch(~/.*.csv/) { csvFile ->  
      Integer count = 0
      csvFile.eachLine { ln ->
	if (count > 0) {
	  endingsFile.append("${ln}\n", "UTF-8")
	}
	count++;
      }
    }
  }
}

task stemTypes() {
  description = "Creates composite csv file for stemtypes collection."
}
stemTypes.doLast {
  if (! buildDir.exists()) {
    buildDir.mkdir()
  }
  File stemtypes = new File(buildDir, "stemtypes.csv")
  stemtypes.setText("MorphStemType,Label,EndingsClass")


  def srcDirs = ["data/stemtypesrc"]

  srcDirs.each {
    File dir = new File(it)
    dir.eachFileMatch(~/.*.csv/) { csvFile ->  
      Integer count = 0
      csvFile.eachLine { ln ->
	if (count > 0) {
	  stemtypes.append("${ln}\n", "UTF-8")
	}
	count++;
      }
    }
  }
}



task tags() {
  description = "Creates composite csv file with a tag record for each ending."
}
tags.doLast {
  File tags = new File(buildDir, "tags.csv")
  tags.setText("TaggingUrn,Ending,Tag\n")
  Integer tagCount = 0


  def stdSrc = ["data/nounendsrc/decl2-standard.csv", "data/verbendsrc/standard.csv"]
  def epicSrc = ["data/nounendsrc/decl2-epic.csv"]



  stdSrc.each { 
    File src = new File(it)
    Integer lineCount = 0
    src.eachLine {  ln ->
      if (lineCount > 0) {
	def cols = ln.split(/,/)
	if ((cols.size() > 0) && (cols[0].size() > 0)) {
	  tagCount++;
	  tags.append("urn:cite:ns:morphtag.${tagCount},${cols[0]},standard\n")
	}
      }
      lineCount++;
    }
  }


  epicSrc.each { 
    File src = new File(it)
    Integer lineCount = 0
    src.eachLine {  ln ->
      if (lineCount > 0) {
	def cols = ln.split(/,/)
	if ((cols.size() > 0) && (cols[0].size() > 0)) {
	  tagCount++;
	  tags.append("urn:cite:ns:morphtag.${tagCount},${cols[0]},epic\n")
	}
      }
      lineCount++;
    }
  }  
}

task csv(type: Copy, dependsOn: [inflClass, morphStems, endings, stemTypes, tags]) {
  description = "Builds CITE Collection of 5 composite csv files and XML inventory from multiple source files."
  from ("data") {
    include "inventory.xml"
  }
  into "${buildDir}"
}

csv.doLast {
  println  "Composite csv files and CITE Collection inventory now in build area."
}

task db(dependsOn: ["csv"]) {
  description = "Builds sqlite database from csv source."
}

db.doLast {
  println "Build sqlite db now."
  // will have to use a buildSrc class to wrap MorphSql presumably?
}



uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}



// add csv files to executable jar?  or sqlite binary?
task uberjar(type: Jar,dependsOn:[':compileJava',':compileGroovy']) {
    from files(sourceSets.main.output.classesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir "specs/java"
        }
        resources {
            srcDir "${buildDir}/specs"
        }
    }
}


task copySpecs(type: Copy) {
  from "specs"
  into "${buildDir}/specs"
}

// Make all testing depend on a filter copy to buildDir.
// If that works, make all testing depned on a md -> html xform,
// and write specs in markdown.
test.dependsOn  copySpecs

test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}

// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: cpResources) {
}
setUpResources.doLast {
  println "READING FILE TREE FROM " + mdSrc + " DIRECTORY"
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      println "Need to work on " + inFile
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)
      println "Created ${htmlFile}"

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")
}

task addVersion(){
}
addVersion.doLast {
  tokenMap["version"] = version
  tokenMap["deps"] = """
    <tr><td>cite</td><td>${citeVersion}</td></tr>
    <tr><td>epidoc</td><td>${epidocVersion}</td></tr>""".toString()
}

task conc(type: Copy, dependsOn: [test, addVersion]) {
//task conc(type: Copy) {
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
