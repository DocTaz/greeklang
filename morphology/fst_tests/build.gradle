
apply plugin: "groovy"
apply plugin: "java"

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    classpath project(':morphology')
  }
}

//import edu.holycross.shot.greekmorph.MorphologicalParser

// Reads data to submit:
String readSubmission(File f) {
  StringBuilder data = new StringBuilder()
  f.eachLine { ln ->
    if (ln.size() < 1) {
      // empty
    } else if (ln[0] == "%") {
      // comment
    } else if (ln ==~ /^[\s]*$/) {
      // no data
    } else {
      data.append(ln + "\n")
    }
  }
  return data.toString()
}


void showDiff(String actual, String expected) {
  def max = actual.size() - 1
  if (expected.size() < max) {
    max = expected.size() - 1
  }
  System.err.println "Cf ${expected.size()} expected with ${actual.size()} actual:"
  for (i in 0..(max)){
    if (expected[i] != actual[i]) {
      System.err.println "at char ${i} expected ${expected[i]} but got ${actual[i]}"
    }
  }
}


// Runs a compiled transducer over a test list of statements
// and compares actual results to expected results.
void assessTests(String transducer, ArrayList testList) {
  File testForms = new File("${buildDir}/coreforms.txt")
  String cmd = "${FSTINFL} ${transducer} ${testForms}"

  System.err.println "Running  " + cmd + " with data from:"
  testList.each { fname ->
    System.err.println "\t" + fname
    File testData = new File("${fname}_submission.txt")
    testForms.setText(readSubmission(testData))
    String expectedReply = new File("${fname}_expected.txt").getText()
    Process process = cmd.execute()
    def out = new StringBuffer()
    def err = new StringBuffer()
    process.consumeProcessOutput( out, err )
    process.waitFor()

    if (out.toString() != expectedReply) {
      showDiff(out.toString(), expectedReply)
    }

    System.err.println "Expected " + expectedReply.size() + ", received " + out.toString().size()
    assert out.toString() == expectedReply
    testForms.setText("")
  }
}

task testOmegaVerbAcceptor(dependsOn: ':morphology:setupCoreTests') {
  description = "Tests verb acceptor"
}
testOmegaVerbAcceptor.doLast {
  String verbAcceptor = "${buildDir}/fst/acceptors/verb.a"
  def testList = [
    "${projectDir}/acceptors/w_verb/1stpp" ,
    "${projectDir}/acceptors/w_verb/2ndpp",
    "${projectDir}/acceptors/w_verb/6thpp"
    /*,
    "${projectDir}/acceptors/w_verb/3rdpp",
    "${projectDir}/acceptors/w_verb/4thpp",
    "${projectDir}/acceptors/w_verb/5thpp",
    "${projectDir}/acceptors/w_verb/6thpp"*/
  ]
  assessTests(verbAcceptor, testList)
}


task testInfinAcceptor(dependsOn: ':morphology:setupCoreTests') {
  description = "Tests infinitive acceptor"
}
testInfinAcceptor.doLast {
  String infinitiveAcceptor = "${buildDir}/fst/acceptors/infinitive.a"
  def testList = [
    "${projectDir}/acceptors/infinitive/1stpp",
    "${projectDir}/acceptors/infinitive/3rdpp",
    "${projectDir}/acceptors/infinitive/4thpp",
    "${projectDir}/acceptors/infinitive/5thpp"
  ]
  assessTests(infinitiveAcceptor, testList)
}


task testAcceptors(dependsOn: [testOmegaVerbAcceptor, testInfinAcceptor]) {
  description = "Tests all acceptor transducers"
}

task testTokens(dependsOn: ':morphology:setupCoreTests'){
  description = "Tests final morphological token transducer"
}
testTokens.doLast {
  String morphTransducer = "${buildDir}/fst/greek.a"
  def testList = [
    "${projectDir}/tokens"
  ]
  assessTests(morphTransducer, testList)
}

task testCoreFst(dependsOn: [testAcceptors, testTokens]) {
  description = "Tests integration of transducers"
}
testCoreFst.doLast {

  System.err.println "Completed integration tests on all transducers"
}


task words (dependsOn: ":morphology:fst") {
  description = "Runs parser on wordlist"
}
words.doLast {
  String fst = "${rootProject.projectDir}/morphology/build/fst/greek.a"
  //MorphologicalParser mp = new MorphologicalParser(fst)
  System.err.println "Finished parsing word list with fst ${fst}."
}
