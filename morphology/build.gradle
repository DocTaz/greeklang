import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.commons.io.FilenameUtils
import edu.unc.epidoc.transcoder.TransCoder

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    classpath group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    classpath group : 'edu.unc.epidoc', name: 'transcoder', version : '1.2-SNAPSHOT'
  }
}

task seeSettings () {
}

seeSettings.doLast {
  System.err.println "Settings from fstconf:"
  def settingsToView =
  ["installdir": installdir,
  "orthography" : orthography,
  "coreinfldir": coreinfldir,
  "stemsdir": stemsdir,
  "urnregdir" : urnregdir,
  "stemssrcdir" : stemssrcdir,
  "rulesdir" : rulesdir,
  "tagsdir" : tagsdir
  ]

  settingsToView.keySet().each {
    println "${it}: ${settingsToView[it]}"
  }

}

// Methods generating statement to include in makefile ////////////////////////
//
// Generates appropriate statement to add to makefile dependencies
// for lexica.
String lexiconMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    fileList.add ("${buildDir}/${orthography}/${fstFile.getName()}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}

// Generates appropriate statements for makefile
// dependencies on compiled inflectional rules.
String rulesMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ("${buildDir}/${orthography}/${compiledFile}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}


// Methods generating statement to include in FST files ////////////////////////
//
// Generates appropriate SFST-PL statements for including
// compiled files with predefined inflectional rules.
String rulesFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder(" ")
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ('"<' + "${buildDir}/${orthography}/${compiledFile}".toString() + '>"')
  }
  fileList.eachWithIndex { f, i ->
    stmt.append(' | ' + f)
  }

  return stmt.toString()
}

// Generates appropriate SFST-PL statements for including lexica
// in .fst files.
String lexiconFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []

  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    //fileList.add ('"' + "${projectDir}/${fstFile.getName()}".toString() + '"')
    fileList.add ('"' + "${buildDir}/${orthography}/${fstFile.getName()}".toString() + '"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}

// Generates  SFST-PL statement to add taxonomic tags
// to FST alphabet of symbols.
String tagsFstStatement() {
  return "#extratag# = <epic><hmt><ml>"
}


// should read all .fst files in stemsdir and read list of stem URNs
String getStemUrns() {
  return "<coretests.n64316_0><coretests.n6949_0><coretests.n81672_0><coretests.n88464_0><coretests.n87956_0><coretests.n786_0>"
}

// should read all .fst files in stemsdir and compile list of unique lexent URNs
String getLexEntUrns() {
  return "<lexent.n47950><lexent.n71065><lexent.n19546><lexent.n50824><lexent.n67485><lexent.n84494><lexent.n64316><lexent.n6949><lexent.n81672><lexent.n88464><lexent.n87956><lexent.n786>"
}

task cpSrc (type: Copy) {
    description = "Filters and copies FST src directory to build area."
    from ("src/fst") {
      include ("**/makefile", "**/*.fst")
    }
    into "${buildDir}/${orthography}"
    filter(
      ReplaceTokens, tokens: [
      "workdir" : buildDir.toString() + "/${orthography}/",
      "lexica": lexiconFstStatement(new File("${projectDir}/${stemsdir}")),
      "makelexica": lexiconMakeStatement(new File("${projectDir}/${stemsdir}")),
      "fstrules": rulesFstStatement(new File("${projectDir}/${rulesdir}")),
      "extramakerules": rulesMakeStatement(new File("${projectDir}/${rulesdir}")),
      "extratags": tagsFstStatement(),
      "stemurn": getStemUrns(),
      "lexicon": getLexEntUrns()
     ])
}


task cpCoreInflection(type:Copy) {
    description = "Filters and copies directory with core inflectional rules to build area."
    from ("${projectDir}/${coreinfldir}/${orthography}") {
      include ("**/*.fst", "**/makefile")
    }
    into "${buildDir}/${orthography}"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/${orthography}/".toString()])
}
cpCoreInflection.doLast {
  System.err.println "Copied ${projectDir}/${coreinfldir} to ${buildDir}/${orthography}"
}
task cpRules (type: Copy, dependsOn: cpCoreInflection) {
    description = "Filters and copies directory with additional inflectional rules to build area."
    from ("${projectDir}/${rulesdir}") {
      include ("**/*.fst")
    }
    into "${buildDir}/${orthography}"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/${orthography}/".toString()])
}


task buildStems() {
  description = "Builds .fst files from tabular source in stems_lexicon"
}
buildStems.doLast {
  System.err.println "buildStems not yet implemented."
  System.err.print "Work with files in " + stemssrcdir
}

task exploreSource() {}
exploreSource.doLast {
  System.err.println "Looking for cp.  Here's runtime: "  //sourceSets.main.runtimeClasspath.getFiles().each {
    //System.err.println  it
  //}
  sourceSets {
          main {
              println "java.srcDirs = ${java.srcDirs}"
              println "resources.srcDirs = ${resources.srcDirs}"
              println "java.files = ${java.files.name}"
              println "allJava.files = ${allJava.files.name}"
              println "resources.files = ${resources.files.name}"
              println "allSource.files = ${allSource.files.name}"
              println "output.classesDir = ${output.classesDir}"
              println "output.resourcesDir = ${output.resourcesDir}"
              println "output.files = ${output.files}"
          }
      }
}


task cpStems (type: Copy, dependsOn: "buildStems") {
    description = "Filters and copies directory with lexica of stems to build area."
    from ("${projectDir}/${stemsdir}") {
      include ('**/*.fst')
    }
    into "${buildDir}/${orthography}"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/${orthography}/".toString()])
}

cpStems.doLast {
  System.err.println "Copied stems from ${projectDir}/${stemsdir}"
}

task cpAll (dependsOn: [ cpStems, cpRules, cpSrc, cpCoreInflection]){
  description = "Copies all source material to build area"
}
cpAll.doLast {
  // check that at least one stems lexicon was copied.
  Integer lexicaCount = 0
  File stemsDir = new File(projectDir,stemsdir)
  stemsDir.eachFileMatch(~/.*.fst/) {
    lexicaCount++
  }
  if (lexicaCount == 0) {
    System.err.println ("cpAll: no lexica of stems found in directory ${stemsdir}.")
    throw new Exception("cpAll: no lexica of stems found in directory ${stemsdir}.")
  } else {
    System.err.println "All source files copied to build area."
  }
  System.err.println "Used orthography ${orthography}"
}


//task compileCore(type:Exec, dependsOn: cpCore) {
task compileCore(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer for core inflection in ${buildDir}/${orthography}/core_inflection/inflection.a"

  outputs.file "${buildDir}/${orthography}/core_inflection/inflection.a".toString()
  inputs.dir "${buildDir}/${orthography}/core_inflection"

  commandLine =  [MAKE, "-f", "${buildDir}/${orthography}/core_inflection/makefile".toString()]
}

task fst(type:Exec, dependsOn: [cpAll, compileCore]) {
  description = "Builds binary Finite State Transducer in ${buildDir}/${orthography}/greek.a"

  outputs.file "${buildDir}/${orthography}/greek.a".toString()
  inputs.dir "${buildDir}/${orthography}"

  commandLine =  [MAKE, "-f", "${buildDir}/${orthography}/makefile".toString()]
}

task fstgen(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/${orthography}/greek.a and 'switched' FST (for bulk generation of surface symbols) in ${buildDir}/${orthography}/bulkgen.a"

  outputs.file "${buildDir}/${orthography}/bulkgen.a".toString()
  inputs.dir "${buildDir}/${orthography}"

  commandLine =  [FSTCOMPILER, "-s", "${buildDir}/${orthography}/morphology.fst".toString(), "${buildDir}/${orthography}/bulkgen.a".toString()]
}




/* ***********  Utility transducers, used in testing, helpful in  debugging  *** */
task rawlex(type:Exec, dependsOn: fst) {
  description = "Builds binary Finite State Transducer in ${buildDir}/${orthography}/rawlex.a"

  outputs.file "${buildDir}/${orthography}/utils/rawlex.a".toString()
  inputs.file "${buildDir}/${orthography}/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/${orthography}/utils/rawlex.fst".toString(), "${buildDir}/${orthography}/utils/rawlex.a".toString()]
}

task rawmorph(type:Exec, dependsOn: fst) {
  description = "Builds binary Finite State Transducer in ${buildDir}/${orthography}/rawmorph.a"

  outputs.file "${buildDir}/${orthography}/utils/rawmorph.a".toString()
  inputs.file "${buildDir}/${orthography}/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/${orthography}/utils/rawmorph.fst".toString(), "${buildDir}/${orthography}/utils/rawmorph.a".toString()]
}

task rawaccepted(type:Exec, dependsOn: rawmorph) {
  description = "Builds binary Finite State Transducer in ${buildDir}/${orthography}/rawaccepted.a"

  outputs.file "${buildDir}/${orthography}/utils/rawaccepted.a".toString()
  inputs.file "${buildDir}/${orthography}/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/${orthography}/utils/rawaccepted.fst".toString(), "${buildDir}/${orthography}/utils/rawaccepted.a".toString()]
}

task utils(dependsOn: [rawlex, rawmorph, rawaccepted]) {
  description = "Compiles utility transducers useful for debugging"
}
utils.doLast {
  System.err.println "Three utility transducers compiled."
}


test.dependsOn utils

// IMPLEMENT THIS:
/*
task install() {
  description = "Install binary fst parser and CLI scripts in /usr/local"
}*/




// GET RID OF THESE:
task setupCoreTests(type: Copy, dependsOn: 'utils') {
  from ("${buildDir}")
  into "fst_tests/build"
}
