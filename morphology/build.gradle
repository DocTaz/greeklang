import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.commons.io.FilenameUtils
import edu.unc.epidoc.transcoder.TransCoder




buildscript {
  repositories {
    mavenCentral()
    maven {
      url "http://beta.hpcc.uh.edu/nexus/content/groups/public"
    }
  }
  dependencies {
    classpath group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    classpath group : 'edu.unc.epidoc', name: 'transcoder', version : '1.2-SNAPSHOT'
  }
}


// Generates appropriate statement to add to makefile dependencies
// for lexica.
String lexiconMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    fileList.add ("${buildDir}/fst/${fstFile.getName()}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}

// Generates appropriate SFST-PL statements for including lexica
// in .fst files.
String lexiconFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []

  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    //fileList.add ('"' + "${projectDir}/${fstFile.getName()}".toString() + '"')
    fileList.add ('"' + "${buildDir}/fst/${fstFile.getName()}".toString() + '"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}




// Generates appropriate SFST-PL statements for including
// compiled inflectional rules.
String rulesFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder(" ")
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ('"<' + "${buildDir}/fst/${compiledFile}".toString() + '>"')
  }
  fileList.eachWithIndex { f, i ->
    stmt.append(' | ' + f)
  }

  return stmt.toString()
}

// Generates appropriate statements for makefile
// dependencies on compiled inflectional rules.
String rulesMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ("${buildDir}/fst/${compiledFile}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}



task cpSrc (type: Copy) {
    description = "Filters and copies src directory to build area."
    from ("src/fst") {
      include ("makefile", "**/*.fst")
    }
    into "${buildDir}/fst"
    filter(
      ReplaceTokens, tokens: [
      "workdir" : buildDir.toString() + "/fst/",
      "lexica": lexiconFstStatement(new File("${projectDir}/${stemsdir}")),
      "makelexica": lexiconMakeStatement(new File("${projectDir}/${stemsdir}")),
      "fstrules": rulesFstStatement(new File("${projectDir}/${rulesdir}")),
      "extramakerules": rulesMakeStatement(new File("${projectDir}/${rulesdir}"))
     ])
}

task cpRules (type: Copy) {
    description = "Filters and copies directory with additional inflectional rules to build area."
    from ("rules") {
      include ("**/*.fst")
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpStems (type: Copy) {
    description = "Filters adn copies directory with lexica of stems to build area."
    from ("stems") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpTags (type: Copy) {
    description = "Filters and copies directory with taxonomic tags to build area."
    from ("userconfig") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpAll (dependsOn: [cpTags, cpStems, cpRules, cpSrc]){
  description = "Copies all source material to build area"
}
cpAll.doLast {
  // check that at least one stems lexicon was copied.

  Integer lexicaCount = 0
  File stemsDir = new File(projectDir,"stems")
  stemsDir.eachFileMatch(~/.*.fst/) {
    lexicaCount++
  }
  if (lexicaCount == 0) {
    System.err.println ("cpAll: no lexica of stems found in directory 'stems'.")
    throw new Exception("cpAll: no lexica of stems found in directory 'stems'.")
  } else {
    System.err.println "All source files copied to build area."
  }

}

task fst(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/greek.a"

  outputs.file "${buildDir}/fst/greek.a".toString()
  inputs.dir "${buildDir}/fst"

  commandLine =  [MAKE, "-f", "${buildDir}/fst/makefile".toString()]
}

task fstgen(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/greek.a and 'switched' FST (for bulk generation of surface symbols) in ${buildDir}/fst/bulkgen.a"

  outputs.file "${buildDir}/fst/bulkgen.a".toString()
  inputs.dir "${buildDir}/fst"

  commandLine =  [FSTCOMPILER, "-s", "${buildDir}/fst/morphology.fst".toString(), "${buildDir}/fst/bulkgen.a".toString()]
}




/* ***********  Utility transducers, used in testing, helpful in  debugging  *** */
task rawlex(type:Exec, dependsOn: fst) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/rawlex.a"

  outputs.file "${buildDir}/fst/utils/rawlex.a".toString()
  inputs.file "${buildDir}/fst/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/fst/utils/rawlex.fst".toString(), "${buildDir}/fst/utils/rawlex.a".toString()]
}

task rawmorph(type:Exec, dependsOn: fst) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/rawmorph.a"

  outputs.file "${buildDir}/fst/utils/rawmorph.a".toString()
  inputs.file "${buildDir}/fst/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/fst/utils/rawmorph.fst".toString(), "${buildDir}/fst/utils/rawmorph.a".toString()]
}

task rawaccepted(type:Exec, dependsOn: rawmorph) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/rawaccepted.a"

  outputs.file "${buildDir}/fst/utils/rawaccepted.a".toString()
  inputs.file "${buildDir}/fst/fst.a"

  commandLine =  [FSTCOMPILER, "${buildDir}/fst/utils/rawaccepted.fst".toString(), "${buildDir}/fst/utils/rawaccepted.a".toString()]
}

task utils(dependsOn: [rawlex, rawmorph, rawaccepted]) {
  description = "Compiles utility transducers useful for debugging"
}
utils.doLast {
  System.err.println "Three utility transducers compiled."
}


test.dependsOn utils

// IMPLEMENT THIS:
task install() {
  description = "Install binary fst parser and CLI scripts in /usr/local"
}




// GET RID OF THESE:
task setupCoreTests(type: Copy, dependsOn: 'utils') {
  from ("${buildDir}")
  into "fst_tests/build"
}
