import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.commons.io.FilenameUtils

apply plugin: "groovy"
apply from: "fstconf.gradle"

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
  }
}
task hello() {
}
hello.doLast {
  System.err.println "Yo from  project ${project.name}"
  System.err.println "It has build dir "+ buildDir
  System.err.println "and project dir "+ projectDir
}


// Generates appropriate statement to add to makefile dependencies
// for lexica.
String lexiconMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    fileList.add ("${buildDir}/fst/${fstFile.getName()}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}

// Generates appropriate SFST-PL statements for including lexica
// in .fst files.
String lexiconFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []

  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    //fileList.add ('"' + "${projectDir}/${fstFile.getName()}".toString() + '"')
    fileList.add ('"' + "${buildDir}/fst/${fstFile.getName()}".toString() + '"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}




// Generates appropriate SFST-PL statements for including
// compiled inflectional rules.
String rulesFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ('"<' + "${buildDir}/fst/${compiledFile}".toString() + '>"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}

// Generates appropriate statements for makefile
// dependencies on compiled inflectional rules.
String rulesMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ("${buildDir}/fst/${compiledFile}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}



task cpSrc (type: Copy) {
    description = "Filters and copies src directory to build area."
    from ("src/fst") {
      include ("makefile", "**/*.fst")
    }
    into "${buildDir}/fst"
    filter(
      ReplaceTokens, tokens: [
      "workdir" : buildDir.toString() + "/fst/",
      "lexica": lexiconFstStatement(new File("${projectDir}/${stemsdir}")),
      "makelexica": lexiconMakeStatement(new File("${projectDir}/${stemsdir}")),
      "extrafstrules": rulesFstStatement(new File("${projectDir}/${rulesdir}")),
      "extramakerules": rulesMakeStatement(new File("${projectDir}/${rulesdir}"))
     ])
}

task cpRules (type: Copy) {
    description = "Filters and copies directory with additional inflectional rules to build area."
    from ("rules") {
      include ("**/*.fst")
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpStems (type: Copy) {
    description = "Filters adn copies directory with lexica of stems to build area."
    from ("stems") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpTags (type: Copy) {
    description = "Filters and copies directory with taxonomic tags to build area."
    from ("tags") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpAll (dependsOn: [cpTags, cpStems, cpRules, cpSrc]){
  description = "Copies all source material to build area"
}
cpAll.doLast {
  System.err.println "All source files copied to build area."
}

task fst(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/morphology.a"

  outputs.file "${buildDir}/fst/morphology.a".toString()
  inputs.dir "${buildDir}/fst"

  commandLine =  [MAKE, "-f", "${buildDir}/fst/makefile".toString()]
}


task fstgen(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/morphology.a and 'switched' FST (for bulk generation of surface symbols) in ${buildDir}/fst/bulkgen.a"

  outputs.file "${buildDir}/fst/bulkgen.a".toString()
  inputs.dir "${buildDir}/fst"

  commandLine =  [FSTCOMPILER, "-s", "${buildDir}/fst/morphology.fst".toString(), "${buildDir}/fst/bulkgen.a".toString()]
}


task cpTestLists (type: Copy) {
  description = "Copies word lists for tests to work area"
  from ("testdata/wordlists") {
    include ('**/*.txt')
  }
  into "${buildDir}/tests/wordlists"
}
cpTestLists.doLast {
  System.err.println "Word lists for tests copied to work area"
}

task buildTestTokens(dependsOn: [cpTestLists]) {
  description = "Convert UTF-8 word lists to FST tokens"
  inputs.dir file("${buildDir}/tests/wordlists")
  outputs.dir file("${buildDir}/tests/tokens")
}
buildTestTokens.doLast {
  def tokensDir = file("${buildDir}/tests/tokens")
  def listsDir = file("${buildDir}/tests/wordlists")
  def fileList = []
  listsDir.eachFileMatch(~/.*.txt/) { fstFile ->
    fileList.add (FilenameUtils.getName(fstFile.toString()))
  }
  System.err.println "Completed building test lists with FST tokens"
  System.err.println "Got list " + fileList
}

/*
task testFST(dependsOn: [buildTestFST]) {
  description = "Runs FST on test word lists and analyzes results."
  // make depend on a task to build test FST (compiling fst after good setup)
}
testFST.doLast{
  System.err.println "Ran testFST"
}

task analyzeTests(dependsOn: testFST){
  description = "Reads output of testFST task and generates analytical report"
}
analyzeTests.doLast {
  System.err.println "Analyzed results of FST testing"
}
*/
