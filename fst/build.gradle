import org.apache.tools.ant.filters.ReplaceTokens
// For unit testing:
apply plugin: "groovy"

apply from: "fstconf.gradle"

// get list of .fst files in directory
String lexiconMakeStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    fileList.add ("${buildDir}/fst/${fstFile.getName()}".toString())
  }
  fileList.each { f ->
    stmt.append(f + " ")
  }
  return stmt.toString()
}

// get list of .fst files in directory
String lexiconFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    fileList.add ('"' + "${buildDir}/fst/${fstFile.getName()}".toString() + '"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}


// get list of .fst files in directory
String rulesFstStatement(File dir) {
  StringBuilder stmt = new StringBuilder()
  def fileList = []
  dir.eachFileMatch(~/.*.fst/) { fstFile ->
    String compiledFile = fstFile.getName().replaceFirst(/fst$/, "a")
    fileList.add ('"<' + "${buildDir}/fst/${compiledFile}".toString() + '>"')
  }
  fileList.eachWithIndex { f, i ->
    if (i < (fileList.size() - 1)) {
      stmt.append( f + ' | ')
    } else {
      stmt.append( f )
    }

  }
  return stmt.toString()
}

task cpSrc (type: Copy) {
    description = "Copies src directory to build area."
    from ("src") {
      include ("makefile", "**/*.fst")
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString(), "lexica": lexiconFstStatement(new File(stemsdir)), "makelexica": lexiconMakeStatement(new File(stemsdir)),
    "extrafstrules": rulesFstStatement(new File(rulesdir))//,
    //"extmakerules": rulesFstStatement(rulesdir),
     ])
}


task cpRules (type: Copy) {
    description = "Copies rules directory to build area."
    from ("rules") {
      include ("**/*.fst")
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpStems (type: Copy) {
    description = "Copies stems directory to build area."
    from ("stems") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}


task cpTags (type: Copy) {
    description = "Copies tags directory to build area."
    from ("tags") {
      include ('**/*.fst')
    }
    into "${buildDir}/fst"
    filter(ReplaceTokens, tokens: ["workdir" : "${buildDir}/fst/".toString()])
}

task cpAll (dependsOn: [cpTags, cpStems, cpRules, cpSrc]){
  description = "Copies all source material to build area"
}
cpAll.doLast {
  System.err.println "All source files copied to build area."
}



task tokenFormat() {
}
tokenFormat.doLast {
  System.err.println lexiconFileStatement(new File("fst/stems"))
}


task fst(type:Exec, dependsOn: cpAll) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/morphology.a"
  commandLine =  [MAKE, "-f", "${buildDir}/fst/makefile".toString()]
}


task fstgen(type:Exec, dependsOn: fst) {
  description = "Builds binary Finite State Transducer in ${buildDir}/fst/morphology.a and switched FST in ${buildDir}/fst/bulkgen.a"
  commandLine =  [FSTCOMPILER, "-s", "${buildDir}/fst/morphology.fst".toString(), "${buildDir}/fst/bulkgen.a".toString()]
}
